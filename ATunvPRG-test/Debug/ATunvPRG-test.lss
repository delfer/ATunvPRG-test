
ATunvPRG-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000144  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000094a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001b6  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000102  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001cb  00000000  00000000  00000c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00000df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010a  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000073  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00000f91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  58:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  5c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  60:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  64:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  68:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  6c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  70:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d2 e0       	ldi	r29, 0x02	; 2
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  84:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <main>:

int main(void)
{
	//Start CPU on quartz freq
	//Tern off prescaler
	CLKPR = (1<<CLKPCE); //Enable editing CLKPS
  8c:	e1 e6       	ldi	r30, 0x61	; 97
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 e8       	ldi	r24, 0x80	; 128
  92:	80 83       	st	Z, r24
	CLKPR = 0; //Set prescaler to 1
  94:	10 82       	st	Z, r1
	
	unsigned char i; //Counter (number of bit in byte)
	
	//Make all 21 pins as outputs
	DDRC = 0b11110100;
  96:	84 ef       	ldi	r24, 0xF4	; 244
  98:	87 b9       	out	0x07, r24	; 7
	DDRB = 0B11111111;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	84 b9       	out	0x04, r24	; 4
	DDRD = 0B11111111;
  9e:	8a b9       	out	0x0a, r24	; 10
	
    while(1)
    {
		//PORTC 2,4,5,6,7,8
        for (i = 0; i < 8; i++)
  a0:	40 e0       	ldi	r20, 0x00	; 0
		{
			if ((i < 2) || (i == 3))
				continue;
			PORTC = 1 << i;
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
			_delay_ms(1000); 
		}
		PORTC = 0;
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
	DDRD = 0B11111111;
	
    while(1)
    {
		//PORTC 2,4,5,6,7,8
        for (i = 0; i < 8; i++)
  aa:	e0 e0       	ldi	r30, 0x00	; 0
  ac:	16 c0       	rjmp	.+44     	; 0xda <main+0x4e>
		{
			if ((i < 2) || (i == 3))
  ae:	42 30       	cpi	r20, 0x02	; 2
  b0:	98 f0       	brcs	.+38     	; 0xd8 <main+0x4c>
  b2:	43 30       	cpi	r20, 0x03	; 3
  b4:	89 f0       	breq	.+34     	; 0xd8 <main+0x4c>
				continue;
			PORTC = 1 << i;
  b6:	c9 01       	movw	r24, r18
  b8:	04 2e       	mov	r0, r20
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x34>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <main+0x30>
  c4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	83 ed       	ldi	r24, 0xD3	; 211
  ca:	90 e3       	ldi	r25, 0x30	; 48
  cc:	51 50       	subi	r21, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x40>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x4a>
  d6:	00 00       	nop
	DDRD = 0B11111111;
	
    while(1)
    {
		//PORTC 2,4,5,6,7,8
        for (i = 0; i < 8; i++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	48 30       	cpi	r20, 0x08	; 8
  dc:	40 f3       	brcs	.-48     	; 0xae <main+0x22>
			if ((i < 2) || (i == 3))
				continue;
			PORTC = 1 << i;
			_delay_ms(1000); 
		}
		PORTC = 0;
  de:	18 b8       	out	0x08, r1	; 8
  e0:	cb 01       	movw	r24, r22
		
		//PORTB 0,1,2,3,4,5,6,7,8
		for (i = 0; i < 8; i++)
		{
			PORTB = 1 << i;
  e2:	a9 01       	movw	r20, r18
  e4:	08 2e       	mov	r0, r24
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x60>
  e8:	44 0f       	add	r20, r20
  ea:	55 1f       	adc	r21, r21
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x5c>
  f0:	45 b9       	out	0x05, r20	; 5
  f2:	ff ef       	ldi	r31, 0xFF	; 255
  f4:	43 ed       	ldi	r20, 0xD3	; 211
  f6:	50 e3       	ldi	r21, 0x30	; 48
  f8:	f1 50       	subi	r31, 0x01	; 1
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	50 40       	sbci	r21, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x6c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x76>
 102:	00 00       	nop
 104:	01 96       	adiw	r24, 0x01	; 1
			_delay_ms(1000); 
		}
		PORTC = 0;
		
		//PORTB 0,1,2,3,4,5,6,7,8
		for (i = 0; i < 8; i++)
 106:	88 30       	cpi	r24, 0x08	; 8
 108:	91 05       	cpc	r25, r1
 10a:	59 f7       	brne	.-42     	; 0xe2 <main+0x56>
		{
			PORTB = 1 << i;
			_delay_ms(1000);
		}
		PORTB = 0;
 10c:	15 b8       	out	0x05, r1	; 5
 10e:	cb 01       	movw	r24, r22
		
		//PORTD 0,1,2,3,4,5,6,7,8
		for (i = 0; i < 8; i++)
		{
			PORTD = 1 << i;
 110:	a9 01       	movw	r20, r18
 112:	08 2e       	mov	r0, r24
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x8e>
 116:	44 0f       	add	r20, r20
 118:	55 1f       	adc	r21, r21
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <main+0x8a>
 11e:	4b b9       	out	0x0b, r20	; 11
 120:	ff ef       	ldi	r31, 0xFF	; 255
 122:	43 ed       	ldi	r20, 0xD3	; 211
 124:	50 e3       	ldi	r21, 0x30	; 48
 126:	f1 50       	subi	r31, 0x01	; 1
 128:	40 40       	sbci	r20, 0x00	; 0
 12a:	50 40       	sbci	r21, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x9a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xa4>
 130:	00 00       	nop
 132:	01 96       	adiw	r24, 0x01	; 1
			_delay_ms(1000);
		}
		PORTB = 0;
		
		//PORTD 0,1,2,3,4,5,6,7,8
		for (i = 0; i < 8; i++)
 134:	88 30       	cpi	r24, 0x08	; 8
 136:	91 05       	cpc	r25, r1
 138:	59 f7       	brne	.-42     	; 0x110 <main+0x84>
		{
			PORTD = 1 << i;
			_delay_ms(1000);
		}
		PORTD = 0;
 13a:	1b b8       	out	0x0b, r1	; 11
	DDRD = 0B11111111;
	
    while(1)
    {
		//PORTC 2,4,5,6,7,8
        for (i = 0; i < 8; i++)
 13c:	4e 2f       	mov	r20, r30
		{
			PORTD = 1 << i;
			_delay_ms(1000);
		}
		PORTD = 0;
    }
 13e:	cd cf       	rjmp	.-102    	; 0xda <main+0x4e>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
